/* automatically generated by rust-bindgen 0.68.1 */

pub const NETTLE_VERSION_MAJOR: u32 = 3;
pub const NETTLE_VERSION_MINOR: u32 = 8;
pub const NETTLE_USE_MINI_GMP: u32 = 0;
pub const MD5_DIGEST_SIZE: u32 = 16;
pub const MD5_BLOCK_SIZE: u32 = 64;
pub const MD5_DATA_SIZE: u32 = 64;
pub const _MD5_DIGEST_LENGTH: u32 = 4;
pub const SHA1_DIGEST_SIZE: u32 = 20;
pub const SHA1_BLOCK_SIZE: u32 = 64;
pub const SHA1_DATA_SIZE: u32 = 64;
pub const _SHA1_DIGEST_LENGTH: u32 = 5;
pub const SHA256_DIGEST_SIZE: u32 = 32;
pub const SHA256_BLOCK_SIZE: u32 = 64;
pub const _SHA256_DIGEST_LENGTH: u32 = 8;
pub const SHA224_DIGEST_SIZE: u32 = 28;
pub const SHA224_BLOCK_SIZE: u32 = 64;
pub const SHA512_DIGEST_SIZE: u32 = 64;
pub const SHA512_BLOCK_SIZE: u32 = 128;
pub const _SHA512_DIGEST_LENGTH: u32 = 8;
pub const SHA384_DIGEST_SIZE: u32 = 48;
pub const SHA384_BLOCK_SIZE: u32 = 128;
pub const SHA512_224_DIGEST_SIZE: u32 = 28;
pub const SHA512_224_BLOCK_SIZE: u32 = 128;
pub const SHA512_256_DIGEST_SIZE: u32 = 32;
pub const SHA512_256_BLOCK_SIZE: u32 = 128;
pub const RSA_MINIMUM_N_OCTETS: u32 = 12;
pub const RSA_MINIMUM_N_BITS: u32 = 89;
pub type wchar_t = ::std::os::raw::c_int;
pub type mp_limb_t = ::std::os::raw::c_ulong;
pub type mp_limb_signed_t = ::std::os::raw::c_long;
pub type mp_bitcnt_t = ::std::os::raw::c_ulong;
#[repr(C)]
pub struct __mpz_struct {
    pub _mp_alloc: ::std::os::raw::c_int,
    pub _mp_size: ::std::os::raw::c_int,
    pub _mp_d: *mut mp_limb_t,
}
#[test]
fn bindgen_test_layout___mpz_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__mpz_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mpz_struct>(),
        16usize,
        concat!("Size of: ", stringify!(__mpz_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<__mpz_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpz_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mp_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_alloc),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mp_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mp_d) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__mpz_struct), "::", stringify!(_mp_d)),
    );
}
impl Default for __mpz_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type MP_INT = __mpz_struct;
pub type mpz_t = [__mpz_struct; 1usize];
pub type mp_ptr = *mut mp_limb_t;
pub type mp_srcptr = *const mp_limb_t;
pub type mp_size_t = ::std::os::raw::c_long;
pub type mp_exp_t = ::std::os::raw::c_long;
#[repr(C)]
pub struct __mpq_struct {
    pub _mp_num: __mpz_struct,
    pub _mp_den: __mpz_struct,
}
#[test]
fn bindgen_test_layout___mpq_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__mpq_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mpq_struct>(),
        32usize,
        concat!("Size of: ", stringify!(__mpq_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<__mpq_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpq_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mp_num) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mpq_struct), "::", stringify!(_mp_num)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mp_den) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__mpq_struct), "::", stringify!(_mp_den)),
    );
}
impl Default for __mpq_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type MP_RAT = __mpq_struct;
pub type mpq_t = [__mpq_struct; 1usize];
#[repr(C)]
pub struct __mpf_struct {
    pub _mp_prec: ::std::os::raw::c_int,
    pub _mp_size: ::std::os::raw::c_int,
    pub _mp_exp: mp_exp_t,
    pub _mp_d: *mut mp_limb_t,
}
#[test]
fn bindgen_test_layout___mpf_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__mpf_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mpf_struct>(),
        24usize,
        concat!("Size of: ", stringify!(__mpf_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<__mpf_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpf_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mp_prec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_prec),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mp_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mp_exp) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__mpf_struct), "::", stringify!(_mp_exp)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mp_d) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__mpf_struct), "::", stringify!(_mp_d)),
    );
}
impl Default for __mpf_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mpf_t = [__mpf_struct; 1usize];
pub type mpz_srcptr = *const __mpz_struct;
pub type mpz_ptr = *mut __mpz_struct;
pub type mpf_srcptr = *const __mpf_struct;
pub type mpf_ptr = *mut __mpf_struct;
pub type mpq_srcptr = *const __mpq_struct;
pub type mpq_ptr = *mut __mpq_struct;
extern "C" {
    pub fn __gmp_set_memory_functions(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
        >,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
                arg3: usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize),
        >,
    );
}
extern "C" {
    pub fn __gmp_get_memory_functions(
        arg1: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
        >,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
                arg3: usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg3: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize),
        >,
    );
}
extern "C" {
    pub static __gmp_bits_per_limb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __gmp_errno: ::std::os::raw::c_int;
}
extern "C" {
    pub static __gmp_version: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmp_asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_printf(
        arg1: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_scanf(
        arg1: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_realloc(arg1: mpz_ptr, arg2: mp_size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __gmpz_add(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_add_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_addmul(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_addmul_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_and(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_array_init(arg1: mpz_ptr, arg2: mp_size_t, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpz_bin_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_bin_uiui(
        arg1: mpz_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_cdiv_q(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_cdiv_q_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_cdiv_q_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_cdiv_qr(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_cdiv_qr_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_cdiv_r(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_cdiv_r_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_cdiv_r_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_cdiv_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_clear(arg1: mpz_ptr);
}
extern "C" {
    pub fn __gmpz_clears(arg1: mpz_ptr, ...);
}
extern "C" {
    pub fn __gmpz_clrbit(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_cmp(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmp_d(arg1: mpz_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmp_si(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmp_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmpabs(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmpabs_d(arg1: mpz_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmpabs_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_com(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_combit(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_congruent_p(
        arg1: mpz_srcptr,
        arg2: mpz_srcptr,
        arg3: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_congruent_2exp_p(
        arg1: mpz_srcptr,
        arg2: mpz_srcptr,
        arg3: mp_bitcnt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_congruent_ui_p(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_divexact(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_divexact_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_divisible_p(
        arg1: mpz_srcptr,
        arg2: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_divisible_ui_p(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_divisible_2exp_p(
        arg1: mpz_srcptr,
        arg2: mp_bitcnt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_dump(arg1: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_export(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: ::std::os::raw::c_int,
        arg6: usize,
        arg7: mpz_srcptr,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __gmpz_fac_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_2fac_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_mfac_uiui(
        arg1: mpz_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_primorial_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_fdiv_q(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_fdiv_q_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_fdiv_q_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fdiv_qr(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_fdiv_qr_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fdiv_r(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_fdiv_r_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_fdiv_r_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fdiv_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fib_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_fib2_ui(arg1: mpz_ptr, arg2: mpz_ptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_fits_sint_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_slong_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_sshort_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_gcd(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_gcd_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_gcdext(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_ptr,
        arg4: mpz_srcptr,
        arg5: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_get_d(arg1: mpz_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpz_get_d_2exp(arg1: *mut ::std::os::raw::c_long, arg2: mpz_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpz_get_si(arg1: mpz_srcptr) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __gmpz_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mpz_srcptr,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmpz_hamdist(arg1: mpz_srcptr, arg2: mpz_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_import(
        arg1: mpz_ptr,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: ::std::os::raw::c_int,
        arg6: usize,
        arg7: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __gmpz_init(arg1: mpz_ptr);
}
extern "C" {
    pub fn __gmpz_init2(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_inits(arg1: mpz_ptr, ...);
}
extern "C" {
    pub fn __gmpz_init_set(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_init_set_d(arg1: mpz_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpz_init_set_si(arg1: mpz_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpz_init_set_str(
        arg1: mpz_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_init_set_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_invert(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_ior(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_jacobi(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_kronecker_si(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_kronecker_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_si_kronecker(
        arg1: ::std::os::raw::c_long,
        arg2: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_ui_kronecker(
        arg1: ::std::os::raw::c_ulong,
        arg2: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_lcm(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_lcm_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_lucnum_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_lucnum2_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_millerrabin(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_mod(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_mul(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_mul_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_mul_si(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpz_mul_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_nextprime(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_perfect_power_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_pow_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_powm(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: mpz_srcptr,
        arg4: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_powm_sec(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: mpz_srcptr,
        arg4: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_powm_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_probab_prime_p(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_realloc2(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_remove(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: mpz_srcptr,
    ) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_root(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_rootrem(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_scan0(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_scan1(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_set(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_set_d(arg1: mpz_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpz_set_f(arg1: mpz_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpz_set_si(arg1: mpz_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpz_set_str(
        arg1: mpz_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_set_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_setbit(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_sizeinbase(arg1: mpz_srcptr, arg2: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn __gmpz_sqrt(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_sqrtrem(arg1: mpz_ptr, arg2: mpz_ptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_sub(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_sub_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_ui_sub(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_submul(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_submul_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_swap(arg1: mpz_ptr, arg2: mpz_ptr);
}
extern "C" {
    pub fn __gmpz_tdiv_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tdiv_q(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_tdiv_q_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_tdiv_q_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tdiv_qr(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_tdiv_qr_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tdiv_r(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_tdiv_r_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_tdiv_r_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tstbit(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_ui_pow_ui(
        arg1: mpz_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_xor(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_limbs_read(arg1: mpz_srcptr) -> mp_srcptr;
}
extern "C" {
    pub fn __gmpz_limbs_write(arg1: mpz_ptr, arg2: mp_size_t) -> mp_ptr;
}
extern "C" {
    pub fn __gmpz_limbs_modify(arg1: mpz_ptr, arg2: mp_size_t) -> mp_ptr;
}
extern "C" {
    pub fn __gmpz_limbs_finish(arg1: mpz_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpz_roinit_n(
        arg1: mpz_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
    ) -> mpz_srcptr;
}
extern "C" {
    pub fn __gmpq_add(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_canonicalize(arg1: mpq_ptr);
}
extern "C" {
    pub fn __gmpq_clear(arg1: mpq_ptr);
}
extern "C" {
    pub fn __gmpq_clears(arg1: mpq_ptr, ...);
}
extern "C" {
    pub fn __gmpq_cmp(arg1: mpq_srcptr, arg2: mpq_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_cmp_si(
        arg1: mpq_srcptr,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_cmp_ui(
        arg1: mpq_srcptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_cmp_z(arg1: mpq_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_div(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_div_2exp(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpq_equal(arg1: mpq_srcptr, arg2: mpq_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_get_num(arg1: mpz_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_get_den(arg1: mpz_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_get_d(arg1: mpq_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpq_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mpq_srcptr,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmpq_init(arg1: mpq_ptr);
}
extern "C" {
    pub fn __gmpq_inits(arg1: mpq_ptr, ...);
}
extern "C" {
    pub fn __gmpq_inv(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_mul(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_mul_2exp(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpq_set(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_set_d(arg1: mpq_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpq_set_den(arg1: mpq_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpq_set_f(arg1: mpq_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpq_set_num(arg1: mpq_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpq_set_si(
        arg1: mpq_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpq_set_str(
        arg1: mpq_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_set_ui(
        arg1: mpq_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpq_set_z(arg1: mpq_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpq_sub(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_swap(arg1: mpq_ptr, arg2: mpq_ptr);
}
extern "C" {
    pub fn __gmpf_abs(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_add(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_add_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_ceil(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_clear(arg1: mpf_ptr);
}
extern "C" {
    pub fn __gmpf_clears(arg1: mpf_ptr, ...);
}
extern "C" {
    pub fn __gmpf_cmp(arg1: mpf_srcptr, arg2: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_z(arg1: mpf_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_d(arg1: mpf_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_si(
        arg1: mpf_srcptr,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_ui(
        arg1: mpf_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_div(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_div_2exp(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_div_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_dump(arg1: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_eq(
        arg1: mpf_srcptr,
        arg2: mpf_srcptr,
        arg3: mp_bitcnt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_sint_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_slong_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_sshort_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_uint_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_ulong_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_ushort_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_floor(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_get_d(arg1: mpf_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpf_get_d_2exp(arg1: *mut ::std::os::raw::c_long, arg2: mpf_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpf_get_default_prec() -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpf_get_prec(arg1: mpf_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpf_get_si(arg1: mpf_srcptr) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __gmpf_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut mp_exp_t,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: mpf_srcptr,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmpf_get_ui(arg1: mpf_srcptr) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpf_init(arg1: mpf_ptr);
}
extern "C" {
    pub fn __gmpf_init2(arg1: mpf_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_inits(arg1: mpf_ptr, ...);
}
extern "C" {
    pub fn __gmpf_init_set(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_init_set_d(arg1: mpf_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpf_init_set_si(arg1: mpf_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpf_init_set_str(
        arg1: mpf_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_init_set_ui(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_integer_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_mul(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_mul_2exp(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_mul_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_neg(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_pow_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_reldiff(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_set(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_set_d(arg1: mpf_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpf_set_default_prec(arg1: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_set_prec(arg1: mpf_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_set_prec_raw(arg1: mpf_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_set_q(arg1: mpf_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpf_set_si(arg1: mpf_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpf_set_str(
        arg1: mpf_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_set_ui(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_set_z(arg1: mpf_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpf_size(arg1: mpf_srcptr) -> usize;
}
extern "C" {
    pub fn __gmpf_sqrt(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_sqrt_ui(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_sub(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_sub_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_swap(arg1: mpf_ptr, arg2: mpf_ptr);
}
extern "C" {
    pub fn __gmpf_trunc(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_ui_div(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_ui_sub(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpn_add_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_addmul_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divexact_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    );
}
extern "C" {
    pub fn __gmpn_divexact_by3c(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divrem(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_ptr,
        arg4: mp_size_t,
        arg5: mp_srcptr,
        arg6: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divrem_1(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divrem_2(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_ptr,
        arg4: mp_size_t,
        arg5: mp_srcptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_div_qr_1(
        arg1: mp_ptr,
        arg2: *mut mp_limb_t,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_div_qr_2(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_srcptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcd(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_size_t,
        arg4: mp_ptr,
        arg5: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_gcd_11(arg1: mp_limb_t, arg2: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcd_1(arg1: mp_srcptr, arg2: mp_size_t, arg3: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcdext_1(
        arg1: *mut mp_limb_signed_t,
        arg2: *mut mp_limb_signed_t,
        arg3: mp_limb_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcdext(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: *mut mp_size_t,
        arg4: mp_ptr,
        arg5: mp_size_t,
        arg6: mp_ptr,
        arg7: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_get_str(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: mp_ptr,
        arg4: mp_size_t,
    ) -> usize;
}
extern "C" {
    pub fn __gmpn_hamdist(
        arg1: mp_srcptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
    ) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_lshift(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: ::std::os::raw::c_uint,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mod_1(arg1: mp_srcptr, arg2: mp_size_t, arg3: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mul(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mul_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mul_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_sqr(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_com(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_perfect_square_p(
        arg1: mp_srcptr,
        arg2: mp_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_perfect_power_p(
        arg1: mp_srcptr,
        arg2: mp_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_popcount(arg1: mp_srcptr, arg2: mp_size_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_pow_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
        arg5: mp_ptr,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_preinv_mod_1(
        arg1: mp_srcptr,
        arg2: mp_size_t,
        arg3: mp_limb_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_rshift(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: ::std::os::raw::c_uint,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_scan0(arg1: mp_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_scan1(arg1: mp_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_set_str(
        arg1: mp_ptr,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sizeinbase(
        arg1: mp_srcptr,
        arg2: mp_size_t,
        arg3: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn __gmpn_sqrtrem(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sub_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_submul_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_tdiv_qr(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
        arg6: mp_srcptr,
        arg7: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_and_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_andn_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_nand_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_ior_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_iorn_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_nior_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_xor_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_xnor_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_copyi(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_copyd(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_zero(arg1: mp_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpn_cnd_add_n(
        arg1: mp_limb_t,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_cnd_sub_n(
        arg1: mp_limb_t,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_add_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
        arg5: mp_ptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_add_1_itch(arg1: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_sub_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
        arg5: mp_ptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_sub_1_itch(arg1: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_cnd_swap(
        arg1: mp_limb_t,
        arg2: *mut mp_limb_t,
        arg3: *mut mp_limb_t,
        arg4: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_sec_mul(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
        arg6: mp_ptr,
    );
}
extern "C" {
    pub fn __gmpn_sec_mul_itch(arg1: mp_size_t, arg2: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_sqr(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t, arg4: mp_ptr);
}
extern "C" {
    pub fn __gmpn_sec_sqr_itch(arg1: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_powm(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_bitcnt_t,
        arg6: mp_srcptr,
        arg7: mp_size_t,
        arg8: mp_ptr,
    );
}
extern "C" {
    pub fn __gmpn_sec_powm_itch(
        arg1: mp_size_t,
        arg2: mp_bitcnt_t,
        arg3: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_tabselect(
        arg1: *mut mp_limb_t,
        arg2: *const mp_limb_t,
        arg3: mp_size_t,
        arg4: mp_size_t,
        arg5: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_sec_div_qr(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
        arg6: mp_ptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_div_qr_itch(arg1: mp_size_t, arg2: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_div_r(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_ptr,
    );
}
extern "C" {
    pub fn __gmpn_sec_div_r_itch(arg1: mp_size_t, arg2: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_invert(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_bitcnt_t,
        arg6: mp_ptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_sec_invert_itch(arg1: mp_size_t) -> mp_size_t;
}
pub const GMP_ERROR_NONE: _bindgen_ty_1 = 0;
pub const GMP_ERROR_UNSUPPORTED_ARGUMENT: _bindgen_ty_1 = 1;
pub const GMP_ERROR_DIVISION_BY_ZERO: _bindgen_ty_1 = 2;
pub const GMP_ERROR_SQRT_OF_NEGATIVE: _bindgen_ty_1 = 4;
pub const GMP_ERROR_INVALID_ARGUMENT: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union nettle_block16 {
    pub b: [u8; 16usize],
    pub w: [::std::os::raw::c_ulong; 2usize],
    pub u64_: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_nettle_block16() {
    const UNINIT: ::std::mem::MaybeUninit<nettle_block16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nettle_block16>(),
        16usize,
        concat!("Size of: ", stringify!(nettle_block16)),
    );
    assert_eq!(
        ::std::mem::align_of::<nettle_block16>(),
        8usize,
        concat!("Alignment of ", stringify!(nettle_block16)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(nettle_block16), "::", stringify!(b)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(nettle_block16), "::", stringify!(w)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(nettle_block16), "::", stringify!(u64_)),
    );
}
impl Default for nettle_block16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nettle_block8 {
    pub b: [u8; 8usize],
    pub u64_: u64,
}
#[test]
fn bindgen_test_layout_nettle_block8() {
    const UNINIT: ::std::mem::MaybeUninit<nettle_block8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nettle_block8>(),
        8usize,
        concat!("Size of: ", stringify!(nettle_block8)),
    );
    assert_eq!(
        ::std::mem::align_of::<nettle_block8>(),
        8usize,
        concat!("Alignment of ", stringify!(nettle_block8)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(nettle_block8), "::", stringify!(b)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(nettle_block8), "::", stringify!(u64_)),
    );
}
impl Default for nettle_block8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nettle_random_func = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, length: usize, dst: *mut u8),
>;
pub type nettle_progress_func = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, c: ::std::os::raw::c_int),
>;
pub type nettle_realloc_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        p: *mut ::std::os::raw::c_void,
        length: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type nettle_set_key_func = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, key: *const u8),
>;
pub type nettle_cipher_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *const ::std::os::raw::c_void,
        length: usize,
        dst: *mut u8,
        src: *const u8,
    ),
>;
pub type nettle_crypt_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        length: usize,
        dst: *mut u8,
        src: *const u8,
    ),
>;
pub type nettle_hash_init_func = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void),
>;
pub type nettle_hash_update_func = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, length: usize, src: *const u8),
>;
pub type nettle_hash_digest_func = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, length: usize, dst: *mut u8),
>;
pub type nettle_armor_length_func = ::std::option::Option<
    unsafe extern "C" fn(length: usize) -> usize,
>;
pub type nettle_armor_init_func = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void),
>;
pub type nettle_armor_encode_update_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        dst: *mut ::std::os::raw::c_char,
        src_length: usize,
        src: *const u8,
    ) -> usize,
>;
pub type nettle_armor_encode_final_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        dst: *mut ::std::os::raw::c_char,
    ) -> usize,
>;
pub type nettle_armor_decode_update_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        dst_length: *mut usize,
        dst: *mut u8,
        src_length: usize,
        src: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type nettle_armor_decode_final_func = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn nettle_version_major() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_version_minor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_mpz_sizeinbase_256_s(x: *mut __mpz_struct) -> usize;
}
extern "C" {
    pub fn nettle_mpz_sizeinbase_256_u(x: *mut __mpz_struct) -> usize;
}
extern "C" {
    pub fn nettle_mpz_get_str_256(length: usize, s: *mut u8, x: *mut __mpz_struct);
}
extern "C" {
    pub fn nettle_mpz_set_str_256_s(x: *mut __mpz_struct, length: usize, s: *const u8);
}
extern "C" {
    pub fn nettle_mpz_init_set_str_256_s(
        x: *mut __mpz_struct,
        length: usize,
        s: *const u8,
    );
}
extern "C" {
    pub fn nettle_mpz_set_str_256_u(x: *mut __mpz_struct, length: usize, s: *const u8);
}
extern "C" {
    pub fn nettle_mpz_init_set_str_256_u(
        x: *mut __mpz_struct,
        length: usize,
        s: *const u8,
    );
}
extern "C" {
    pub fn nettle_mpz_random_size(
        x: *mut __mpz_struct,
        ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        bits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn nettle_mpz_random(
        x: *mut __mpz_struct,
        ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        n: *mut __mpz_struct,
    );
}
extern "C" {
    pub fn nettle_random_prime(
        p: *mut __mpz_struct,
        bits: ::std::os::raw::c_uint,
        top_bits_set: ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        progress_ctx: *mut ::std::os::raw::c_void,
        progress: nettle_progress_func,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sexp_iterator {
    _unused: [u8; 0],
}
extern "C" {
    pub fn nettle_mpz_set_sexp(
        x: *mut __mpz_struct,
        limit: ::std::os::raw::c_uint,
        i: *mut sexp_iterator,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_der_iterator {
    _unused: [u8; 0],
}
extern "C" {
    pub fn nettle_asn1_der_get_bignum(
        iterator: *mut asn1_der_iterator,
        x: *mut __mpz_struct,
        max_bits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct md5_ctx {
    pub state: [u32; 4usize],
    pub count: u64,
    pub index: ::std::os::raw::c_uint,
    pub block: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_md5_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<md5_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<md5_ctx>(),
        96usize,
        concat!("Size of: ", stringify!(md5_ctx)),
    );
    assert_eq!(
        ::std::mem::align_of::<md5_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(md5_ctx)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(md5_ctx), "::", stringify!(state)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(md5_ctx), "::", stringify!(count)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(md5_ctx), "::", stringify!(index)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(md5_ctx), "::", stringify!(block)),
    );
}
impl Default for md5_ctx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn nettle_md5_init(ctx: *mut md5_ctx);
}
extern "C" {
    pub fn nettle_md5_update(ctx: *mut md5_ctx, length: usize, data: *const u8);
}
extern "C" {
    pub fn nettle_md5_digest(ctx: *mut md5_ctx, length: usize, digest: *mut u8);
}
extern "C" {
    pub fn nettle_md5_compress(state: *mut u32, data: *const u8);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sha1_ctx {
    pub state: [u32; 5usize],
    pub count: u64,
    pub index: ::std::os::raw::c_uint,
    pub block: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_sha1_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<sha1_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sha1_ctx>(),
        104usize,
        concat!("Size of: ", stringify!(sha1_ctx)),
    );
    assert_eq!(
        ::std::mem::align_of::<sha1_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(sha1_ctx)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sha1_ctx), "::", stringify!(state)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(sha1_ctx), "::", stringify!(count)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(sha1_ctx), "::", stringify!(index)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(sha1_ctx), "::", stringify!(block)),
    );
}
impl Default for sha1_ctx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn nettle_sha1_init(ctx: *mut sha1_ctx);
}
extern "C" {
    pub fn nettle_sha1_update(ctx: *mut sha1_ctx, length: usize, data: *const u8);
}
extern "C" {
    pub fn nettle_sha1_digest(ctx: *mut sha1_ctx, length: usize, digest: *mut u8);
}
extern "C" {
    pub fn nettle_sha1_compress(state: *mut u32, data: *const u8);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sha256_ctx {
    pub state: [u32; 8usize],
    pub count: u64,
    pub index: ::std::os::raw::c_uint,
    pub block: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_sha256_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<sha256_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sha256_ctx>(),
        112usize,
        concat!("Size of: ", stringify!(sha256_ctx)),
    );
    assert_eq!(
        ::std::mem::align_of::<sha256_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(sha256_ctx)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sha256_ctx), "::", stringify!(state)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(sha256_ctx), "::", stringify!(count)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(sha256_ctx), "::", stringify!(index)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(sha256_ctx), "::", stringify!(block)),
    );
}
impl Default for sha256_ctx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn nettle_sha256_init(ctx: *mut sha256_ctx);
}
extern "C" {
    pub fn nettle_sha256_update(ctx: *mut sha256_ctx, length: usize, data: *const u8);
}
extern "C" {
    pub fn nettle_sha256_digest(ctx: *mut sha256_ctx, length: usize, digest: *mut u8);
}
extern "C" {
    pub fn nettle_sha224_init(ctx: *mut sha256_ctx);
}
extern "C" {
    pub fn nettle_sha224_digest(ctx: *mut sha256_ctx, length: usize, digest: *mut u8);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sha512_ctx {
    pub state: [u64; 8usize],
    pub count_low: u64,
    pub count_high: u64,
    pub index: ::std::os::raw::c_uint,
    pub block: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_sha512_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<sha512_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sha512_ctx>(),
        216usize,
        concat!("Size of: ", stringify!(sha512_ctx)),
    );
    assert_eq!(
        ::std::mem::align_of::<sha512_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(sha512_ctx)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sha512_ctx), "::", stringify!(state)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_low) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(sha512_ctx), "::", stringify!(count_low)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_high) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sha512_ctx),
            "::",
            stringify!(count_high),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(sha512_ctx), "::", stringify!(index)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        84usize,
        concat!("Offset of field: ", stringify!(sha512_ctx), "::", stringify!(block)),
    );
}
impl Default for sha512_ctx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn nettle_sha512_init(ctx: *mut sha512_ctx);
}
extern "C" {
    pub fn nettle_sha512_update(ctx: *mut sha512_ctx, length: usize, data: *const u8);
}
extern "C" {
    pub fn nettle_sha512_digest(ctx: *mut sha512_ctx, length: usize, digest: *mut u8);
}
extern "C" {
    pub fn nettle_sha384_init(ctx: *mut sha512_ctx);
}
extern "C" {
    pub fn nettle_sha384_digest(ctx: *mut sha512_ctx, length: usize, digest: *mut u8);
}
extern "C" {
    pub fn nettle_sha512_224_init(ctx: *mut sha512_ctx);
}
extern "C" {
    pub fn nettle_sha512_224_digest(
        ctx: *mut sha512_ctx,
        length: usize,
        digest: *mut u8,
    );
}
extern "C" {
    pub fn nettle_sha512_256_init(ctx: *mut sha512_ctx);
}
extern "C" {
    pub fn nettle_sha512_256_digest(
        ctx: *mut sha512_ctx,
        length: usize,
        digest: *mut u8,
    );
}
#[repr(C)]
pub struct rsa_public_key {
    pub size: usize,
    pub n: mpz_t,
    pub e: mpz_t,
}
#[test]
fn bindgen_test_layout_rsa_public_key() {
    const UNINIT: ::std::mem::MaybeUninit<rsa_public_key> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rsa_public_key>(),
        40usize,
        concat!("Size of: ", stringify!(rsa_public_key)),
    );
    assert_eq!(
        ::std::mem::align_of::<rsa_public_key>(),
        8usize,
        concat!("Alignment of ", stringify!(rsa_public_key)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rsa_public_key), "::", stringify!(size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(rsa_public_key), "::", stringify!(n)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rsa_public_key), "::", stringify!(e)),
    );
}
impl Default for rsa_public_key {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct rsa_private_key {
    pub size: usize,
    pub d: mpz_t,
    pub p: mpz_t,
    pub q: mpz_t,
    pub a: mpz_t,
    pub b: mpz_t,
    pub c: mpz_t,
}
#[test]
fn bindgen_test_layout_rsa_private_key() {
    const UNINIT: ::std::mem::MaybeUninit<rsa_private_key> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rsa_private_key>(),
        104usize,
        concat!("Size of: ", stringify!(rsa_private_key)),
    );
    assert_eq!(
        ::std::mem::align_of::<rsa_private_key>(),
        8usize,
        concat!("Alignment of ", stringify!(rsa_private_key)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rsa_private_key), "::", stringify!(size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(rsa_private_key), "::", stringify!(d)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rsa_private_key), "::", stringify!(p)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(rsa_private_key), "::", stringify!(q)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rsa_private_key), "::", stringify!(a)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(rsa_private_key), "::", stringify!(b)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(rsa_private_key), "::", stringify!(c)),
    );
}
impl Default for rsa_private_key {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn nettle_rsa_public_key_init(key: *mut rsa_public_key);
}
extern "C" {
    pub fn nettle_rsa_public_key_clear(key: *mut rsa_public_key);
}
extern "C" {
    pub fn nettle_rsa_public_key_prepare(
        key: *mut rsa_public_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_private_key_init(key: *mut rsa_private_key);
}
extern "C" {
    pub fn nettle_rsa_private_key_clear(key: *mut rsa_private_key);
}
extern "C" {
    pub fn nettle_rsa_private_key_prepare(
        key: *mut rsa_private_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_pkcs1_sign(
        key: *const rsa_private_key,
        length: usize,
        digest_info: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_pkcs1_sign_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        length: usize,
        digest_info: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_pkcs1_verify(
        key: *const rsa_public_key,
        length: usize,
        digest_info: *const u8,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_md5_sign(
        key: *const rsa_private_key,
        hash: *mut md5_ctx,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_md5_sign_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        hash: *mut md5_ctx,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_md5_verify(
        key: *const rsa_public_key,
        hash: *mut md5_ctx,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha1_sign(
        key: *const rsa_private_key,
        hash: *mut sha1_ctx,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha1_sign_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        hash: *mut sha1_ctx,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha1_verify(
        key: *const rsa_public_key,
        hash: *mut sha1_ctx,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha256_sign(
        key: *const rsa_private_key,
        hash: *mut sha256_ctx,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha256_sign_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        hash: *mut sha256_ctx,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha256_verify(
        key: *const rsa_public_key,
        hash: *mut sha256_ctx,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha512_sign(
        key: *const rsa_private_key,
        hash: *mut sha512_ctx,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha512_sign_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        hash: *mut sha512_ctx,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha512_verify(
        key: *const rsa_public_key,
        hash: *mut sha512_ctx,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_md5_sign_digest(
        key: *const rsa_private_key,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_md5_sign_digest_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_md5_verify_digest(
        key: *const rsa_public_key,
        digest: *const u8,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha1_sign_digest(
        key: *const rsa_private_key,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha1_sign_digest_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha1_verify_digest(
        key: *const rsa_public_key,
        digest: *const u8,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha256_sign_digest(
        key: *const rsa_private_key,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha256_sign_digest_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha256_verify_digest(
        key: *const rsa_public_key,
        digest: *const u8,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha512_sign_digest(
        key: *const rsa_private_key,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha512_sign_digest_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sha512_verify_digest(
        key: *const rsa_public_key,
        digest: *const u8,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_pss_sha256_sign_digest_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        salt_length: usize,
        salt: *const u8,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_pss_sha256_verify_digest(
        key: *const rsa_public_key,
        salt_length: usize,
        digest: *const u8,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_pss_sha384_sign_digest_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        salt_length: usize,
        salt: *const u8,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_pss_sha384_verify_digest(
        key: *const rsa_public_key,
        salt_length: usize,
        digest: *const u8,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_pss_sha512_sign_digest_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        salt_length: usize,
        salt: *const u8,
        digest: *const u8,
        s: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_pss_sha512_verify_digest(
        key: *const rsa_public_key,
        salt_length: usize,
        digest: *const u8,
        signature: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_encrypt(
        key: *const rsa_public_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        length: usize,
        cleartext: *const u8,
        cipher: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_decrypt(
        key: *const rsa_private_key,
        length: *mut usize,
        cleartext: *mut u8,
        ciphertext: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_decrypt_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        length: *mut usize,
        message: *mut u8,
        gibberish: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_sec_decrypt(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        length: usize,
        message: *mut u8,
        gibberish: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_compute_root(
        key: *const rsa_private_key,
        x: *mut __mpz_struct,
        m: *mut __mpz_struct,
    );
}
extern "C" {
    pub fn nettle_rsa_compute_root_tr(
        pub_: *const rsa_public_key,
        key: *const rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        x: *mut __mpz_struct,
        m: *mut __mpz_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_generate_keypair(
        pub_: *mut rsa_public_key,
        key: *mut rsa_private_key,
        random_ctx: *mut ::std::os::raw::c_void,
        random: nettle_random_func,
        progress_ctx: *mut ::std::os::raw::c_void,
        progress: nettle_progress_func,
        n_size: ::std::os::raw::c_uint,
        e_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nettle_buffer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn nettle_rsa_keypair_to_sexp(
        buffer: *mut nettle_buffer,
        algorithm_name: *const ::std::os::raw::c_char,
        pub_: *const rsa_public_key,
        priv_: *const rsa_private_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_keypair_from_sexp_alist(
        pub_: *mut rsa_public_key,
        priv_: *mut rsa_private_key,
        limit: ::std::os::raw::c_uint,
        i: *mut sexp_iterator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_keypair_from_sexp(
        pub_: *mut rsa_public_key,
        priv_: *mut rsa_private_key,
        limit: ::std::os::raw::c_uint,
        length: usize,
        expr: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_public_key_from_der_iterator(
        pub_: *mut rsa_public_key,
        limit: ::std::os::raw::c_uint,
        i: *mut asn1_der_iterator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_private_key_from_der_iterator(
        pub_: *mut rsa_public_key,
        priv_: *mut rsa_private_key,
        limit: ::std::os::raw::c_uint,
        i: *mut asn1_der_iterator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_keypair_from_der(
        pub_: *mut rsa_public_key,
        priv_: *mut rsa_private_key,
        limit: ::std::os::raw::c_uint,
        length: usize,
        data: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nettle_rsa_keypair_to_openpgp(
        buffer: *mut nettle_buffer,
        pub_: *const rsa_public_key,
        priv_: *const rsa_private_key,
        userid: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
